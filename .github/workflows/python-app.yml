name: Build and Upload Flask App Artifact

on:
  push:
    branches: 
      - main
      - master
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry/virtualenvs
          .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
        restore-keys: |
          poetry-${{ runner.os }}-

    - name: Install Poetry
      run: |
        pip install poetry

    - name: Install dependencies
      run: |
        poetry install

    - name: Determine semantic version
      id: get_version
      run: |
        VERSION_INPUT="${{ github.event.inputs.version }}"
        if [ -n "$VERSION_INPUT" ]; then
          VERSION="$VERSION_INPUT"
        else
          VERSION=$(git describe --tags --abbrev=0 || echo "0.1.0")
        fi
        echo "$VERSION" > VERSION
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build artifact
      run: |
        mkdir -p artifact
        shopt -s extglob
        cp -r !(artifact) artifact/
        rm -rf artifact/venv artifact/__pycache__
        cp VERSION artifact/

    - name: Upload Poetry cache
      uses: actions/upload-artifact@v4
      with:
        name: poetry-cache
        path: |
          ~/.cache/pypoetry/virtualenvs
          .venv

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: flask-app-artifact
        path: artifact

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-app-artifact
          path: flask-app-artifact

      - name: Read version
        id: read_version
        run: |
          VERSION=$(cat flask-app-artifact/VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.read_version.outputs.version }}
          release_name: Release ${{ steps.read_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./flask-app-artifact.zip
          asset_name: flask-app-artifact.zip
          asset_content_type: application/zip
      - name: Zip artifact
        run: |
          cd flask-app-artifact
          zip -r ../flask-app-artifact.zip . 
